package com.example.android.booklistingapp;

import android.app.LoaderManager.LoaderCallbacks;
import android.content.Loader;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.widget.ListView;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity implements LoaderCallbacks<List<BookStore>>   {

    private static String ggl_books_url ="https://www.googleapis.com/books/v1/volumes?q=ass";

    private BookAdapter mAdapter;

    private final int Books_Loader_ID =1;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Get a reference to the LoaderManager, in order to interact with loaders.
        android.app.LoaderManager loaderManager = getLoaderManager();

        // Initialize the loader. Pass in the int ID constant defined above and pass in null for
        // the bundle. Pass in this activity for the LoaderCallbacks parameter (which is valid
        // because this activity implements the LoaderCallbacks interface).
        loaderManager.initLoader(Books_Loader_ID, null, this);

        mAdapter = new BookAdapter(this, new ArrayList<BookStore>());

        // Find a reference to the {@link ListView} in the layout
        ListView booksListView = (ListView) findViewById(R.id.list);


        booksListView.setAdapter(mAdapter);

    }


    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param i  The ID whose loader is to be created.
     * @param bundle Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<List<BookStore>> onCreateLoader(int i, Bundle bundle) {
        return new BooksLoader(this, ggl_books_url);
    }

    /**
     * Called when a previously created loader has finished its load.  Note
     * that normally an application is <em>not</em> allowed to commit fragment
     * transactions while in this call, since it can happen after an
     * activity's state is saved.
     * FragmentManager.openTransaction()} for further discussion on this.
     * <p>
     * <p>This function is guaranteed to be called prior to the release of
     * the last data that was supplied for this Loader.  At this point
     * you should remove all use of the old data (since it will be released
     * soon), but should not do your own release of the data since its Loader
     * owns it and will take care of that.  The Loader will take care of
     * management of its data so you don't have to.  In particular:

     *
     * @param loader The Loader that has finished.
     * @param books   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<List<BookStore>> loader, List<BookStore> books) {

        mAdapter.clear();

        if(books == null && books.isEmpty()) {
            mAdapter.addAll(books);
        }
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<List<BookStore>> loader) {

        mAdapter.clear();
    }
}
